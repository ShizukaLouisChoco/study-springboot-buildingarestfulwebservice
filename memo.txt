https://spring.io/guides/gs/rest-service/

Dependency : Spring Web

1) Create a Resource Representation Class
    service interaction :
    the service handle GET requests for /greeting
    optionally with a name parameter in the query string
    GET request should return a 200 OK response with JSON in the body that represents a greeting

    output prévu :
    {
        "id": 1,
        "content": "Hello, World!"
    }

    id field is a unique identifier for the greeting
    content is the textual representation of the greeting
    To model the greeting representation, create a resource representation class with fields, constructors and accessors for the id and content data in Greeting.java

    *This application uses the Jackson JSON library to automatically marshal instances of type Greeting into JSON.Jackson is included by default by the web starter

2) Create a Resource Controller
    To build RESTful web services, HTTP requests are handled by a controller
    These components are identifies by the @RestController annotation.
    The GreetingController handles GET requests for /greeting by returning a new instance of the Greeting class

    @GetMapping annotation ensures that HTTP GET requests to /greeting are mapped to the greeting() method
    @RequestParam binds the value of the query string parameter name into the name parameter of the greeting method
    if the name parameter is absent in the request, the defaultValue of World is used
    The implementation of the method body creates and returns a new Greeting object with id and content attributes based on the next value from the counter and formats the given name by using the greeting template

    A key difference between a traditional MVC controller and the RESTful web service controller here is the way that the HTTP response body is created
    Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful web service controller populates and returns a Greeting object.
    The object data will be written directly to the HTTP response as JSON

    This code uses Spring @RestController annotation, wich marks the class as a controller where every method returns a domain object instead of a view
    It is shorthand for including both @Controller and @ResponseBody

    The Greeting object must be converted to JSON. Thanks to Spring's HTTP message converter support, you need not do this conversion manually
    Because jackson 2 is on the classpath, Spring's MappingJackson2HttpMessageConverter is automatically chosen to convert the Greeting instance to JSON

    @SpringBootApplication is a convenience annotation that adds all of the following:
       - @Configuration: Tags the class as a source of bean definitions for the application context
       - @EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings
            For exemple, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet
       - @ComponentScan: Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers
    The main() method uses Spring Boot's SpringApplication.run() method to launch an application
    Did you notice that there was not a single line of XML?
    There is no web.xml file, either.
    This web application is 100% pure java and you did not have to deal with configuring any plumbing or infrastructure　

3) Build an executable JAR
    You can run the application from the command line with Gradle or Maven
    You can also build a single executable JAR file that contains all the necessary dependencies, classes, and resources and run that
    Building an executable jar makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth.
     If you use Gradle, you can run the application by using ./gradlew bootRun
     Alternatively, you can build the JAR file by using ./gradlew build and then run the JAR file, as follows : java - jar build/libs/gs-rest-service-0.1.0.jar
     If you use Maven, you can run the application by using ./mvnw spring-boot:run.
     Alternatively, you can build the JAR file with ./mvnw clean package and then run the JAR file, as follows: java -jar target/gs-rest-service-0.1.0.jar
     *This steps described here create a runnable JAR. You can also build a classic WAR file

     Logging output is displayed
     The service should be up and running within a few seconds

4) Test the Service
    Now that the service is up, visit http://localhost:8080/greeting where you should see:
    {"id":1,"content":"Hello, World!"}

    Provide a name query string parameter by visiting http://localhost:8080/greeting?name=User
    Notice how the value of the content attribute changes from Hello, World! to Hello, User!, as following listing shows :
    {"id":2,"content":"Hello,User!"}

    This change demonstrates that the @RequestParam arrangement in GreetingController is working as expected
    The name parameter has been given a default value of World but can be explicitly overridden through the query string

    Notice also how the id attribute has changed from 1 to 2.
    This proves that you are working against the same GreetingController instance accross multiple requests and that its counter field is being incremented on each call as expected

5) Summary
    Congratulations! You have just developed a RESTful web service with Spring


